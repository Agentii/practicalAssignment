// Open the file that defines the type "expr" we shall use as AST
%{
open PATypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> NAME
%token TRUE FALSE
%token TIMES DIV PLUS MINUS POW
%token AND OR NOT SCAND SCOR
%token EQ NEQ GT GEQ LT LEQ
%token SEMCOL ASS BRANCH EVAL
%token SKIP IF FI DO OD
%token LPAR RPAR LBRACK RBRACK
%token EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left EOF SKIP
%left PLUS MINUS
%left TIMES DIV
%right POW
%left OR SCOR
%left AND SCAND
%right NOT
%left EQ GT LT
%left NEQ GEQ LEQ
%right ASS SEMCOL BRANCH EVAL
%left RPAR RBRACK
%right LPAR LBRACK
%left NUM NAME

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <C> start
%type <a> expression
%type <b> boolean
%type <C> command
%type <GC> guardedCommand

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:


expression:
  | NUM                                   { Num($1) }
  | NAME                                  { Var($1) }
  | NAME LBRACK expression RBRACK         { Arr($1, $3) }
  | expression PLUS expression            { Plus($1,$3) }
  | expression MINUS expression           { Minus($1,$3) }
  | expression TIMES expression           { Times($1,$3) }
  | expression DIV expression             { Div($1,$3) }
  | MINUS expression                      { UMinus($2) }
  | expression POW expression             { Pow($1,$3) }
  | LPAR expression RPAR                  { ParA($2) }

boolean:
  | TRUE                                  { Bool(true) }
  | FALSE                                 { Bool(false) }
  | boolean SCAND boolean                 { SCAnd($1,$3) }
  | boolean SCOR boolean                  { SCOr($1,$3) }
  | boolean AND boolean                   { And($1,$3) }
  | boolean OR boolean                    { Or($1,$3) }
  | NOT boolean                           { Not($2) }
  | expression EQ expression              { Equal($1, $3) }
  | expression NEQ expression             { NEqual($1,$3) }
  | expression GT expression              { GreaterThan($1,$3) }
  | expression GEQ expression             { GreaterEqual($1,$3) }
  | expression LT expression              { LessThan($1,$3) }
  | expression LEQ expression             { LessEqual($1,$3) }
  | LPAR boolean RPAR                     { ParB($2) }

command:
  | NAME ASS expression                   { Ass($1, $3) }
  | NAME LBRACK expression RBRACK ASS expression  { ArrAss((Arr($1, $3)), $6) }
  | SKIP                                  { Skip }
  | command SEMCOL command                { Seq($1, $3) }
  | IF guardedCommand FI                  { If($2) }
  | DO guardedCommand OD                  { Do($2) }

guardedCommand:
  | boolean EVAL command                  { Eval($1, $3) }
  | guardedCommand BRANCH guardedCommand  { Branch($1, $3) }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
