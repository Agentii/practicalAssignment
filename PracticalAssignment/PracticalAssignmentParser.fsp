// Open the file that defines the type "expr" we shall use as AST
%{
open PracticalAssignmentTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> NAME
%token UMINUS TIMES DIV PLUS MINUS POW LPAR RPAR EOF
%token AND OR NOT SCAND SCOR
%token EQ NEQ GT GEQ LT LEQ
%token SEMCOL ASS BRACK
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right ASS SEMCOL BRACK
%left OR SCOR
%left AND SCAND
%right NOT
%left PLUS MINUS
%left TIMES DIV
%right POW
%right UMINUS
%left RPAR
%right LPAR

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <expr> start
%type <expr> expression

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: expression EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
expression:
  | expression TIMES expression   { Times($1,$3) }
  | expression DIV expression     { Div($1,$3) }
  | expression PLUS expression    { Plus($1,$3) }
  | expression MINUS expression   { Minus($1,$3) }
  | expression POW expression     { Pow($1,$3) }
  | UMINUS expression              { UMinus($2) }
  | n                             { n($1) }
  | LPAR expression RPAR          { $2 }
  | expression EQ expression      { EQ($1, $3) }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
